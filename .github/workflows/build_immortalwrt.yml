name: 🚀 编译 ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      owner:
        description: "仓库拥有者"
        type: string
        required: true
        default: "immortalwrt"
      repo:
        description: "仓库名称"
        type: string
        required: true
        default: "immortalwrt"
      branch:
        description: "分支"
        type: string
        required: true
        default: "openwrt-24.10"
      multithreading:
        description: "多线程编译"
        type: boolean
        default: true
      ssh:
        description: "SSH 调试"
        type: boolean
        default: false
      include_files:
        description: "包含 files 大法目录"
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    name: 🚀 编译固件
    
    steps:
      - name: 📦 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential ccache cmake curl file g++ gcc git libncurses5-dev \
            libssl-dev python3 python3-setuptools rsync unzip wget \
            ack autoconf automake bison flex libtool pkg-config scons \
            gawk gettext gperf help2man intltool zlib1g-dev

      - name: 📥 克隆当前仓库
        uses: actions/checkout@v4

      - name: 📥 克隆 ImmortalWrt 仓库
        uses: actions/checkout@v4
        with:
          repository: "${{ inputs.owner }}/${{ inputs.repo }}"
          ref: ${{ inputs.branch }}
          path: source

      - name: ⚙️ 复制脚本、补丁和配置文件
        run: |
          # 复制设备定义和配置文件
          cp -f diy.sh source/
          cp -rf beeconmini-seed-ac2/* source/
          echo "✅ 基础文件复制完成"
          # 复制 files 大法目录（如果存在且需要）
          if [ -d "files" ] && ${{ inputs.include_files }}; then
            cp -rf files source/
            echo "✅ files 大法目录复制完成"
          else
            echo "⚠️  files 目录不存在或未启用 include_files，跳过"
          fi

      - name: 🛠️ 执行自定义配置
        working-directory: source
        run: |
          chmod +x diy.sh
          ./diy.sh

      - name: ⚙️ 配置编译选项
        working-directory: source
        run: |
            # 首先生成默认配置
            make defconfig
            # 然后追加 AC2 专用配置
            # cat config.ac2 >> .config
            # 确保配置一致
            # make olddefconfig
            echo "✅ 编译配置完成"

      - name: 🔍 SSH 调试会话
        if: ${{ inputs.ssh }}
        uses: csexton/debugger-action@master

      - name: 📤 上传编译前配置
        uses: actions/upload-artifact@v4
        with:
          name: config-before-build
          path: |
            source/.config
          retention-days: 1   

      - name: 🏗️ 编译固件
        working-directory: source
        run: |
          # 完全静默，只在错误时显示
          if [ "${{ inputs.multithreading }}" = "true" ]; then
            make -j$(nproc) V=0 || make -j1 V=s  # 失败时显示详细错误
          else
            make -j1 V=0 || make V=s
          fi

      - name: 📤 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ github.sha }}
          path: |
            source/bin/targets
          retention-days: 7