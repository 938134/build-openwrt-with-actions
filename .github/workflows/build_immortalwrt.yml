name: 🚀 编译 ImmortalWrt

on:
  workflow_dispatch:
    inputs:
      owner:
        description: "仓库拥有者"
        type: string
        required: true
        default: "BeeconMini"
      repo:
        description: "仓库名称"
        type: string
        required: true
        default: "immortalwrt"
      branch:
        description: "分支"
        type: string
        required: true
        default: "24.10.1"
      ssh:
        description: "SSH 调试"
        type: boolean
        default: false
      include_files:
        description: "包含 files 大法目录"
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    name: 🚀 编译固件
    
    # 高高兴兴定义变量 🎉
    env:
      DEVICE_NAME: "beeconmini-seed-ac2"
      DEVICE_CONFIG: "ac2.config"
      BUILD_DIR: "source"
      ARTIFACT_RETENTION_DAYS: 7
      CONFIG_RETENTION_DAYS: 1
      TARGET_PATH: "bin/targets"
    
    steps:
      - name: 🧹 清理磁盘空间
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /opt/hostedtoolcache /usr/local/lib/android || true
          
      - name: 📦 安装编译依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache clang cmake cpio curl file flex gawk gettext git \
            gperf libncurses5-dev libssl-dev python3 rsync unzip wget \
            zlib1g-dev zstd lib32gcc-s1 libc6-dev-i386 subversion patch
          
      - name: 📥 克隆当前仓库
        uses: actions/checkout@v4

      - name: 📥 克隆 ImmortalWrt 仓库
        uses: actions/checkout@v4
        with:
          repository: "${{ inputs.owner }}/${{ inputs.repo }}"
          ref: ${{ inputs.branch }}
          path: ${{ env.BUILD_DIR }}

      - name: ⚙️ 执行自定义配置
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # 先复制文件到当前目录
          cp ../diy.sh ./
          cp -rf ../${{ env.DEVICE_NAME }}/* ./
          echo "✅ 基础文件复制完成"
          
          # 复制 files 大法目录
          if [ -d "../files" ] && ${{ inputs.include_files }}; then
            cp -rf ../files ./
            echo "✅ files 大法目录复制完成"
          else
            echo "⚠️  files 目录不存在或未启用 include_files，跳过"
          fi
          
          # 执行自定义配置
          chmod +x diy.sh
          ./diy.sh
          echo "🛠️ 自定义配置执行完成"

      - name: 🔍 SSH 调试会话
        if: ${{ inputs.ssh }}
        uses: csexton/debugger-action@master    
        
      - name: ⚙️ 配置编译选项
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # 首先生成默认配置
          cp ${{ env.DEVICE_CONFIG }} .config
          make defconfig
          echo "✅ 编译配置完成"
        
      - name: 📤 上传编译前配置
        uses: actions/upload-artifact@v4
        with:
          name: config
          path: |
            ${{ env.BUILD_DIR }}/${{ env.DEVICE_CONFIG }}
          retention-days: ${{ env.CONFIG_RETENTION_DAYS }}

      - name: 🏗️ 编译固件
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          make download -j$(nproc)
          make -j$(nproc) || make -j1 V=0
          
      - name: 🔧 设置时间变量
        id: datetime
        run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: 📤 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEVICE_NAME }}-${{ steps.datetime.outputs.timestamp }}
          path: |
            ${{ env.BUILD_DIR }}/${{ env.TARGET_PATH }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
